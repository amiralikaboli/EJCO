
TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }
[(Name("ml"), [Name("link_type_id")], [Name("movie_id"), Name("linked_movie_id")]), (Name("lt"), [Name("id")], [])]
[Lookup([0 @ ml.link_type_id = 0 @ lt.id)])]

TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }
[(Name("mi_idx1"), [Name("info_type_id"), Name("movie_id")], [Name("info")]), (Name("it1"), [Name("id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }), [Id(1)], [Id(0), Id(2)])]
[Lookup([0 @ mi_idx1.info_type_id = 0 @ it1.id), 1 @ mi_idx1.movie_id = 1 @ ml.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }
[(Name("mi_idx2"), [Name("info_type_id"), Name("movie_id")], [Name("info")]), (Name("it2"), [Name("id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }), [Id(4)], [Id(0), Id(1), Id(2), Id(3)])]
[Lookup([0 @ mi_idx2.info_type_id = 0 @ it2.id), 1 @ mi_idx2.movie_id = 1 @ ml.linked_movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 0.000537, cardinality: 28, extra_info: "INNER\nt1.id = mi_idx1.movie_id\nt1.id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002848, cardinality: 90852, extra_info: "INNER\nt1.kind_id = kt1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.019524, cardinality: 2528312, extra_info: "title\n[INFOSEPARATOR]\nid\nkind_id\ntitle", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.0, cardinality: 1, extra_info: "kt1.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 0.0, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.kind_id, right_attr: kt1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: t1.id, right_attr: ml.movie_id }] })) }
[(Name("t1"), [Name("kind_id"), Name("id")], [Name("title")]), (Name("kt1"), [Name("id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }), [Id(4)], [Id(0), Id(1), Id(2), Id(3), Id(5), Id(6)])]
[Lookup([0 @ t1.kind_id = 0 @ kt1.id), 1 @ t1.id = 1 @ mi_idx1.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 9.3e-5, cardinality: 5, extra_info: "INNER\nt2.id = mi_idx2.movie_id\nt2.id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.00145, cardinality: 15807, extra_info: "INNER\nt2.kind_id = kt2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.033572, cardinality: 445860, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\nkind_id\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2005 AND production_year<=2008 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 2e-6, cardinality: 1, extra_info: "kt2.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.kind_id, right_attr: kt2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000537, cardinality: 28, extra_info: "INNER\nt1.id = mi_idx1.movie_id\nt1.id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002848, cardinality: 90852, extra_info: "INNER\nt1.kind_id = kt1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.019524, cardinality: 2528312, extra_info: "title\n[INFOSEPARATOR]\nid\nkind_id\ntitle", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.0, cardinality: 1, extra_info: "kt1.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 0.0, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.kind_id, right_attr: kt1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: t1.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.id, right_attr: mi_idx2.movie_id }, Equalizer { left_attr: t2.id, right_attr: ml.linked_movie_id }] })) }
[(Name("t2"), [Name("kind_id"), Name("id")], [Name("title")]), (Name("kt2"), [Name("id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 0.000537, cardinality: 28, extra_info: "INNER\nt1.id = mi_idx1.movie_id\nt1.id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002848, cardinality: 90852, extra_info: "INNER\nt1.kind_id = kt1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.019524, cardinality: 2528312, extra_info: "title\n[INFOSEPARATOR]\nid\nkind_id\ntitle", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.0, cardinality: 1, extra_info: "kt1.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 0.0, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.kind_id, right_attr: kt1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: t1.id, right_attr: ml.movie_id }] })) }), [Id(4)], [Id(0), Id(1), Id(2), Id(3), Id(5), Id(6), Id(7), Id(8)])]
[Lookup([0 @ t2.kind_id = 0 @ kt2.id), 1 @ t2.id = 1 @ mi_idx2.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 0.004258, cardinality: 2, extra_info: "INNER\nmc1.movie_id = mi_idx1.movie_id\nmc1.movie_id = t1.id\nmc1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.009111, cardinality: 1153798, extra_info: "INNER\nmc1.company_id = cn1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000547, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\ncompany_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.company_id, movie_companies.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.003365, cardinality: 84843, extra_info: "company_name\n[INFOSEPARATOR]\ncountry_code\nid\nname\n[INFOSEPARATOR]\nFilters: country_code=[us] AND country_code IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.country_code, company_name.id, company_name.name] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc1.company_id, right_attr: cn1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 9.3e-5, cardinality: 5, extra_info: "INNER\nt2.id = mi_idx2.movie_id\nt2.id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.00145, cardinality: 15807, extra_info: "INNER\nt2.kind_id = kt2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.033572, cardinality: 445860, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\nkind_id\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2005 AND production_year<=2008 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 2e-6, cardinality: 1, extra_info: "kt2.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.kind_id, right_attr: kt2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000537, cardinality: 28, extra_info: "INNER\nt1.id = mi_idx1.movie_id\nt1.id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002848, cardinality: 90852, extra_info: "INNER\nt1.kind_id = kt1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.019524, cardinality: 2528312, extra_info: "title\n[INFOSEPARATOR]\nid\nkind_id\ntitle", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.0, cardinality: 1, extra_info: "kt1.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 0.0, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.kind_id, right_attr: kt1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: t1.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.id, right_attr: mi_idx2.movie_id }, Equalizer { left_attr: t2.id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc1.movie_id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: mc1.movie_id, right_attr: t1.id }, Equalizer { left_attr: mc1.movie_id, right_attr: ml.movie_id }] })) }
[(Name("mc1"), [Name("company_id"), Name("movie_id")], []), (Name("cn1"), [Name("id")], [Name("name")]), (Node(TreeOp { name: "HASH_JOIN", timing: 9.3e-5, cardinality: 5, extra_info: "INNER\nt2.id = mi_idx2.movie_id\nt2.id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.00145, cardinality: 15807, extra_info: "INNER\nt2.kind_id = kt2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.033572, cardinality: 445860, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\nkind_id\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2005 AND production_year<=2008 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 2e-6, cardinality: 1, extra_info: "kt2.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.kind_id, right_attr: kt2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000537, cardinality: 28, extra_info: "INNER\nt1.id = mi_idx1.movie_id\nt1.id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002848, cardinality: 90852, extra_info: "INNER\nt1.kind_id = kt1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.019524, cardinality: 2528312, extra_info: "title\n[INFOSEPARATOR]\nid\nkind_id\ntitle", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.0, cardinality: 1, extra_info: "kt1.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 0.0, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.kind_id, right_attr: kt1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: t1.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.id, right_attr: mi_idx2.movie_id }, Equalizer { left_attr: t2.id, right_attr: ml.linked_movie_id }] })) }), [Id(4)], [Id(0), Id(1), Id(2), Id(3), Id(5), Id(6), Id(7), Id(8), Id(9), Id(10)])]
[Lookup([1 @ mc1.movie_id = 1 @ mi_idx1.movie_id), 0 @ mc1.company_id = 0 @ cn1.id)])]

TreeOp { name: "HASH_JOIN", timing: 0.007764, cardinality: 8, extra_info: "INNER\nmc2.movie_id = t2.id\nmc2.movie_id = ml.linked_movie_id\nmc2.movie_id = mi_idx2.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.007571, cardinality: 2609129, extra_info: "INNER\nmc2.company_id = cn2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000497, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\ncompany_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.company_id, movie_companies.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.001168, cardinality: 234997, extra_info: "company_name\n[INFOSEPARATOR]\nid\nname", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.id, company_name.name] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc2.company_id, right_attr: cn2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.004258, cardinality: 2, extra_info: "INNER\nmc1.movie_id = mi_idx1.movie_id\nmc1.movie_id = t1.id\nmc1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.009111, cardinality: 1153798, extra_info: "INNER\nmc1.company_id = cn1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000547, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\ncompany_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.company_id, movie_companies.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.003365, cardinality: 84843, extra_info: "company_name\n[INFOSEPARATOR]\ncountry_code\nid\nname\n[INFOSEPARATOR]\nFilters: country_code=[us] AND country_code IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.country_code, company_name.id, company_name.name] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc1.company_id, right_attr: cn1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 9.3e-5, cardinality: 5, extra_info: "INNER\nt2.id = mi_idx2.movie_id\nt2.id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.00145, cardinality: 15807, extra_info: "INNER\nt2.kind_id = kt2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.033572, cardinality: 445860, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\nkind_id\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2005 AND production_year<=2008 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 2e-6, cardinality: 1, extra_info: "kt2.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.kind_id, right_attr: kt2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000537, cardinality: 28, extra_info: "INNER\nt1.id = mi_idx1.movie_id\nt1.id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002848, cardinality: 90852, extra_info: "INNER\nt1.kind_id = kt1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.019524, cardinality: 2528312, extra_info: "title\n[INFOSEPARATOR]\nid\nkind_id\ntitle", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.0, cardinality: 1, extra_info: "kt1.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 0.0, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.kind_id, right_attr: kt1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: t1.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.id, right_attr: mi_idx2.movie_id }, Equalizer { left_attr: t2.id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc1.movie_id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: mc1.movie_id, right_attr: t1.id }, Equalizer { left_attr: mc1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc2.movie_id, right_attr: t2.id }, Equalizer { left_attr: mc2.movie_id, right_attr: ml.linked_movie_id }, Equalizer { left_attr: mc2.movie_id, right_attr: mi_idx2.movie_id }] })) }
[(Name("mc2"), [Name("company_id"), Name("movie_id")], []), (Name("cn2"), [Name("id")], [Name("name")]), (Node(TreeOp { name: "HASH_JOIN", timing: 0.004258, cardinality: 2, extra_info: "INNER\nmc1.movie_id = mi_idx1.movie_id\nmc1.movie_id = t1.id\nmc1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.009111, cardinality: 1153798, extra_info: "INNER\nmc1.company_id = cn1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000547, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\ncompany_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.company_id, movie_companies.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.003365, cardinality: 84843, extra_info: "company_name\n[INFOSEPARATOR]\ncountry_code\nid\nname\n[INFOSEPARATOR]\nFilters: country_code=[us] AND country_code IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.country_code, company_name.id, company_name.name] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc1.company_id, right_attr: cn1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 9.3e-5, cardinality: 5, extra_info: "INNER\nt2.id = mi_idx2.movie_id\nt2.id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.00145, cardinality: 15807, extra_info: "INNER\nt2.kind_id = kt2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.033572, cardinality: 445860, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\nkind_id\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2005 AND production_year<=2008 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 2e-6, cardinality: 1, extra_info: "kt2.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.kind_id, right_attr: kt2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000537, cardinality: 28, extra_info: "INNER\nt1.id = mi_idx1.movie_id\nt1.id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002848, cardinality: 90852, extra_info: "INNER\nt1.kind_id = kt1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.019524, cardinality: 2528312, extra_info: "title\n[INFOSEPARATOR]\nid\nkind_id\ntitle", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.id, title.kind_id, title.title] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 1, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.0, cardinality: 1, extra_info: "kt1.kind = 'tv series'", children: [TreeOp { name: "SEQ_SCAN", timing: 0.0, cardinality: 7, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.kind_id, right_attr: kt1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000138, cardinality: 30, extra_info: "INNER\nmi_idx2.movie_id = ml.linked_movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001131, cardinality: 25591, extra_info: "INNER\nmi_idx2.info_type_id = it2.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.014111, cardinality: 674828, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\ninfo_type_id\nmovie_id\n[INFOSEPARATOR]\nFilters: info<3.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.info_type_id, movie_info_idx.movie_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.002056, cardinality: 2064, extra_info: "INNER\nmi_idx1.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001422, cardinality: 459925, extra_info: "INNER\nmi_idx1.info_type_id = it1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.006299, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo_type_id\nmovie_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info_type_id, movie_info_idx.movie_id, movie_info_idx.info] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.info_type_id, right_attr: it1.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.3e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id\nlinked_movie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id, movie_link.linked_movie_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 3e-6, cardinality: 2, extra_info: "(lt.link = 'sequel' OR lt.link = 'follows' OR lt.link = 'followed by')", children: [TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx1.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx2.movie_id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t1.id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: t1.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t2.id, right_attr: mi_idx2.movie_id }, Equalizer { left_attr: t2.id, right_attr: ml.linked_movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc1.movie_id, right_attr: mi_idx1.movie_id }, Equalizer { left_attr: mc1.movie_id, right_attr: t1.id }, Equalizer { left_attr: mc1.movie_id, right_attr: ml.movie_id }] })) }), [Id(4)], [Id(0), Id(1), Id(2), Id(3), Id(5), Id(6), Id(7), Id(8), Id(9), Id(10), Id(11), Id(12)])]
[Lookup([1 @ mc2.movie_id = 1 @ ml.linked_movie_id), 0 @ mc2.company_id = 0 @ cn2.id)])]
