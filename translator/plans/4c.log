
TreeOp { name: "HASH_JOIN", timing: 5.3e-5, cardinality: 4700, extra_info: "INNER\nmi_idx.info_type_id = it.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.012894, cardinality: 8600, extra_info: "INNER\nmk.keyword_id = k.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.189779, cardinality: 3568755, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.088027, cardinality: 2742670, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00172, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.028668, cardinality: 1749032, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>1990 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.014462, cardinality: 806365, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info>2.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 30, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.002621, cardinality: 30, extra_info: "contains(k.keyword, 'sequel')", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000961, cardinality: 134170, extra_info: "keyword\n[INFOSEPARATOR]\nkeyword\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "keyword", attributes: [keyword.keyword, keyword.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.keyword_id, right_attr: k.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 8e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx.info_type_id, right_attr: it.id }] })) }
[(Name("mk"), [Name("movie_id"), Name("keyword_id")], []), (Name("t"), [Name("id")], [Name("title")]), (Name("mi_idx"), [Name("movie_id"), Name("info_type_id")], [Name("info")]), (Name("k"), [Name("id")], []), (Name("it"), [Name("id")], [])]
[Lookup([0 @ mk.movie_id = 0 @ t.id), 0 @ mk.movie_id = 1 @ mi_idx.movie_id), 1 @ mk.keyword_id = 2 @ k.id)]), Intersect([mi_idx.info_type_id @ 1), it.id @ 3)])]
