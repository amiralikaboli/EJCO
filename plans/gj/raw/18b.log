
TreeOp { name: "HASH_JOIN", timing: 0.01038, cardinality: 14696, extra_info: "INNER\nt.id = mi_idx.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.028573, cardinality: 784488, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2008 AND production_year<=2014 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.011413, cardinality: 52629, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info>8.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }] })) }
[(Name("t"), [Name("id")], [Name("title")]), (Name("mi_idx"), [Name("movie_id")], [Name("info_type_id"), Name("info")])]
[Lookup([0 @ t.id = 0 @ mi_idx.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 7e-6, cardinality: 358, extra_info: "INNER\nmi.info_type_id = it1.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 1.4e-5, cardinality: 358, extra_info: "INNER\nmi_idx.info_type_id = it2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.003228, cardinality: 1358, extra_info: "INNER\nmi.movie_id = t.id\nmi.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "PROJECTION", timing: 1.5e-5, cardinality: 73047, extra_info: "#0\n#2\n#3\n", children: [TreeOp { name: "FILTER", timing: 0.047835, cardinality: 73047, extra_info: "((mi.note IS NULL) AND (mi.info = 'Horror' OR mi.info = 'Thriller'))", children: [TreeOp { name: "SEQ_SCAN", timing: 0.114439, cardinality: 14835720, extra_info: "movie_info\n[INFOSEPARATOR]\ninfo\nnote\nmovie_id\ninfo_type_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info", attributes: [movie_info.info, movie_info.note, movie_info.movie_id, movie_info.info_type_id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#0, .#2, .#3] })) }, TreeOp { name: "HASH_JOIN", timing: 0.01038, cardinality: 14696, extra_info: "INNER\nt.id = mi_idx.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.028573, cardinality: 784488, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2008 AND production_year<=2014 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.011413, cardinality: 52629, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info>8.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.movie_id, right_attr: t.id }, Equalizer { left_attr: mi.movie_id, right_attr: mi_idx.movie_id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=genres AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.info_type_id, right_attr: it1.id }] })) }
[(Name("mi"), [Name("movie_id"), Name("info_type_id")], [Name("info")]), (Node(TreeOp { name: "HASH_JOIN", timing: 0.01038, cardinality: 14696, extra_info: "INNER\nt.id = mi_idx.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.028573, cardinality: 784488, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2008 AND production_year<=2014 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.011413, cardinality: 52629, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info>8.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }] })) }), [Id(0), Id(2)], [Id(1), Id(3)]), (Name("it2"), [Name("id")], []), (Name("it1"), [Name("id")], [])]
[Lookup([0 @ mi.movie_id = 0 @ t.id)]), Intersect([mi_idx.info_type_id @ 0), it2.id @ 1)]), Lookup([1 @ mi.info_type_id = 2 @ it1.id)])]

TreeOp { name: "HASH_JOIN", timing: 0.000799, cardinality: 11, extra_info: "INNER\nci.movie_id = t.id\nci.movie_id = mi_idx.movie_id\nci.movie_id = mi.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.019721, cardinality: 98503, extra_info: "INNER\nci.person_id = n.id\n", children: [TreeOp { name: "PROJECTION", timing: 0.000125, cardinality: 1244716, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 0.02239, cardinality: 1244716, extra_info: "IN (...)", children: [TreeOp { name: "HASH_JOIN", timing: 0.247732, cardinality: 36244344, extra_info: "MARK\nci.note = #0\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.107269, cardinality: 36244344, extra_info: "cast_info\n[INFOSEPARATOR]\nnote\nmovie_id\nperson_id", children: [], attr: Some(Scan(ScanAttr { table_name: "cast_info", attributes: [cast_info.note, cast_info.movie_id, cast_info.person_id] })) }, TreeOp { name: "CHUNK_SCAN", timing: 1e-6, cardinality: 5, extra_info: "", children: [], attr: None }], attr: None }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.00414, cardinality: 961555, extra_info: "name\n[INFOSEPARATOR]\ngender\nid\n[INFOSEPARATOR]\nFilters: gender=f AND gender IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "name", attributes: [name.gender, name.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ci.person_id, right_attr: n.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 7e-6, cardinality: 358, extra_info: "INNER\nmi.info_type_id = it1.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 1.4e-5, cardinality: 358, extra_info: "INNER\nmi_idx.info_type_id = it2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.003228, cardinality: 1358, extra_info: "INNER\nmi.movie_id = t.id\nmi.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "PROJECTION", timing: 1.5e-5, cardinality: 73047, extra_info: "#0\n#2\n#3\n", children: [TreeOp { name: "FILTER", timing: 0.047835, cardinality: 73047, extra_info: "((mi.note IS NULL) AND (mi.info = 'Horror' OR mi.info = 'Thriller'))", children: [TreeOp { name: "SEQ_SCAN", timing: 0.114439, cardinality: 14835720, extra_info: "movie_info\n[INFOSEPARATOR]\ninfo\nnote\nmovie_id\ninfo_type_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info", attributes: [movie_info.info, movie_info.note, movie_info.movie_id, movie_info.info_type_id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#0, .#2, .#3] })) }, TreeOp { name: "HASH_JOIN", timing: 0.01038, cardinality: 14696, extra_info: "INNER\nt.id = mi_idx.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.028573, cardinality: 784488, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2008 AND production_year<=2014 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.011413, cardinality: 52629, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info>8.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.movie_id, right_attr: t.id }, Equalizer { left_attr: mi.movie_id, right_attr: mi_idx.movie_id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=genres AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.info_type_id, right_attr: it1.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ci.movie_id, right_attr: t.id }, Equalizer { left_attr: ci.movie_id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: ci.movie_id, right_attr: mi.movie_id }] })) }
[(Name("ci"), [Name("person_id"), Name("movie_id")], []), (Name("n"), [Name("id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 7e-6, cardinality: 358, extra_info: "INNER\nmi.info_type_id = it1.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 1.4e-5, cardinality: 358, extra_info: "INNER\nmi_idx.info_type_id = it2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.003228, cardinality: 1358, extra_info: "INNER\nmi.movie_id = t.id\nmi.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "PROJECTION", timing: 1.5e-5, cardinality: 73047, extra_info: "#0\n#2\n#3\n", children: [TreeOp { name: "FILTER", timing: 0.047835, cardinality: 73047, extra_info: "((mi.note IS NULL) AND (mi.info = 'Horror' OR mi.info = 'Thriller'))", children: [TreeOp { name: "SEQ_SCAN", timing: 0.114439, cardinality: 14835720, extra_info: "movie_info\n[INFOSEPARATOR]\ninfo\nnote\nmovie_id\ninfo_type_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info", attributes: [movie_info.info, movie_info.note, movie_info.movie_id, movie_info.info_type_id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#0, .#2, .#3] })) }, TreeOp { name: "HASH_JOIN", timing: 0.01038, cardinality: 14696, extra_info: "INNER\nt.id = mi_idx.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.028573, cardinality: 784488, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=2008 AND production_year<=2014 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.011413, cardinality: 52629, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info>8.0 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.movie_id, right_attr: t.id }, Equalizer { left_attr: mi.movie_id, right_attr: mi_idx.movie_id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 7e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=genres AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.info_type_id, right_attr: it1.id }] })) }), [Id(0)], [Id(1), Id(2), Id(3), Id(4), Id(5)])]
[Lookup([0 @ ci.person_id = 0 @ n.id), 1 @ ci.movie_id = 1 @ mi_idx.movie_id)])]
