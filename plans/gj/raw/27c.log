
TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }
[(Name("ml"), [Name("link_type_id")], [Name("movie_id")]), (Name("lt"), [Name("id")], [Name("link")])]
[Lookup([0 @ ml.link_type_id = 0 @ lt.id)])]

TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }
[(Name("cc"), [Name("subject_id"), Name("status_id"), Name("movie_id")], []), (Name("cct1"), [Name("id")], []), (Name("cct2"), [Name("id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }), [Id(1)], [Id(0), Id(2)])]
[Lookup([0 @ cc.subject_id = 0 @ cct1.id), 1 @ cc.status_id = 1 @ cct2.id), 2 @ cc.movie_id = 2 @ ml.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 0.007767, cardinality: 228, extra_info: "INNER\nt.id = cc.movie_id\nt.id = ml.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.02934, cardinality: 1900368, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=1950 AND production_year<=2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: cc.movie_id }, Equalizer { left_attr: t.id, right_attr: ml.movie_id }] })) }
[(Name("t"), [Name("id")], [Name("title")]), (Node(TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }), [Id(2)], [Id(0), Id(1), Id(3), Id(4)])]
[Lookup([0 @ t.id = 0 @ cc.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 0.001407, cardinality: 277, extra_info: "INNER\nmc.movie_id = cc.movie_id\nmc.movie_id = t.id\nmc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.005093, cardinality: 224256, extra_info: "INNER\nmc.company_id = cn.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002186, cardinality: 1193928, extra_info: "INNER\nmc.company_type_id = ct.id\n", children: [TreeOp { name: "PROJECTION", timing: 0.000124, cardinality: 1271989, extra_info: "#1\n#2\n#3\n", children: [TreeOp { name: "FILTER", timing: 0.003583, cardinality: 1271989, extra_info: "(mc.note IS NULL)", children: [TreeOp { name: "SEQ_SCAN", timing: 0.005873, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\nnote\nmovie_id\ncompany_type_id\ncompany_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.note, movie_companies.movie_id, movie_companies.company_type_id, movie_companies.company_id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2, .#3] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "company_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=production companies AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "company_type", attributes: [company_type.kind, company_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_type_id, right_attr: ct.id }] })) }, TreeOp { name: "PROJECTION", timing: 1e-5, cardinality: 48302, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 0.005465, cardinality: 48302, extra_info: "(cn.country_code != '[pl]' AND (contains(cn.name, 'Film') OR contains(cn.name, 'Warner')))", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00223, cardinality: 234997, extra_info: "company_name\n[INFOSEPARATOR]\ncountry_code\nname\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.country_code, company_name.name, company_name.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_id, right_attr: cn.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.007767, cardinality: 228, extra_info: "INNER\nt.id = cc.movie_id\nt.id = ml.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.02934, cardinality: 1900368, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=1950 AND production_year<=2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: cc.movie_id }, Equalizer { left_attr: t.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mc.movie_id, right_attr: t.id }, Equalizer { left_attr: mc.movie_id, right_attr: ml.movie_id }] })) }
[(Name("mc"), [Name("company_type_id"), Name("company_id"), Name("movie_id")], []), (Name("ct"), [Name("id")], []), (Name("cn"), [Name("id")], [Name("name")]), (Node(TreeOp { name: "HASH_JOIN", timing: 0.007767, cardinality: 228, extra_info: "INNER\nt.id = cc.movie_id\nt.id = ml.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.02934, cardinality: 1900368, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=1950 AND production_year<=2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: cc.movie_id }, Equalizer { left_attr: t.id, right_attr: ml.movie_id }] })) }), [Id(0)], [Id(1), Id(2), Id(3), Id(4), Id(5)])]
[Lookup([0 @ mc.company_type_id = 0 @ ct.id), 1 @ mc.company_id = 1 @ cn.id), 2 @ mc.movie_id = 2 @ t.id)])]

TreeOp { name: "HASH_JOIN", timing: 0.000103, cardinality: 172, extra_info: "INNER\nmk.movie_id = cc.movie_id\nmk.movie_id = t.id\nmk.movie_id = ml.movie_id\nmk.movie_id = mc.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.003708, cardinality: 10544, extra_info: "INNER\nmk.keyword_id = k.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00076, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.001326, cardinality: 1, extra_info: "keyword\n[INFOSEPARATOR]\nkeyword\nid\n[INFOSEPARATOR]\nFilters: keyword=sequel AND keyword IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "keyword", attributes: [keyword.keyword, keyword.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.keyword_id, right_attr: k.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.001407, cardinality: 277, extra_info: "INNER\nmc.movie_id = cc.movie_id\nmc.movie_id = t.id\nmc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.005093, cardinality: 224256, extra_info: "INNER\nmc.company_id = cn.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002186, cardinality: 1193928, extra_info: "INNER\nmc.company_type_id = ct.id\n", children: [TreeOp { name: "PROJECTION", timing: 0.000124, cardinality: 1271989, extra_info: "#1\n#2\n#3\n", children: [TreeOp { name: "FILTER", timing: 0.003583, cardinality: 1271989, extra_info: "(mc.note IS NULL)", children: [TreeOp { name: "SEQ_SCAN", timing: 0.005873, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\nnote\nmovie_id\ncompany_type_id\ncompany_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.note, movie_companies.movie_id, movie_companies.company_type_id, movie_companies.company_id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2, .#3] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "company_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=production companies AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "company_type", attributes: [company_type.kind, company_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_type_id, right_attr: ct.id }] })) }, TreeOp { name: "PROJECTION", timing: 1e-5, cardinality: 48302, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 0.005465, cardinality: 48302, extra_info: "(cn.country_code != '[pl]' AND (contains(cn.name, 'Film') OR contains(cn.name, 'Warner')))", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00223, cardinality: 234997, extra_info: "company_name\n[INFOSEPARATOR]\ncountry_code\nname\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.country_code, company_name.name, company_name.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_id, right_attr: cn.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.007767, cardinality: 228, extra_info: "INNER\nt.id = cc.movie_id\nt.id = ml.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.02934, cardinality: 1900368, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=1950 AND production_year<=2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: cc.movie_id }, Equalizer { left_attr: t.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mc.movie_id, right_attr: t.id }, Equalizer { left_attr: mc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: t.id }, Equalizer { left_attr: mk.movie_id, right_attr: ml.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mc.movie_id }] })) }
[(Name("mk"), [Name("keyword_id"), Name("movie_id")], []), (Name("k"), [Name("id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 0.001407, cardinality: 277, extra_info: "INNER\nmc.movie_id = cc.movie_id\nmc.movie_id = t.id\nmc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.005093, cardinality: 224256, extra_info: "INNER\nmc.company_id = cn.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002186, cardinality: 1193928, extra_info: "INNER\nmc.company_type_id = ct.id\n", children: [TreeOp { name: "PROJECTION", timing: 0.000124, cardinality: 1271989, extra_info: "#1\n#2\n#3\n", children: [TreeOp { name: "FILTER", timing: 0.003583, cardinality: 1271989, extra_info: "(mc.note IS NULL)", children: [TreeOp { name: "SEQ_SCAN", timing: 0.005873, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\nnote\nmovie_id\ncompany_type_id\ncompany_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.note, movie_companies.movie_id, movie_companies.company_type_id, movie_companies.company_id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2, .#3] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "company_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=production companies AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "company_type", attributes: [company_type.kind, company_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_type_id, right_attr: ct.id }] })) }, TreeOp { name: "PROJECTION", timing: 1e-5, cardinality: 48302, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 0.005465, cardinality: 48302, extra_info: "(cn.country_code != '[pl]' AND (contains(cn.name, 'Film') OR contains(cn.name, 'Warner')))", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00223, cardinality: 234997, extra_info: "company_name\n[INFOSEPARATOR]\ncountry_code\nname\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.country_code, company_name.name, company_name.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_id, right_attr: cn.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.007767, cardinality: 228, extra_info: "INNER\nt.id = cc.movie_id\nt.id = ml.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.02934, cardinality: 1900368, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=1950 AND production_year<=2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: cc.movie_id }, Equalizer { left_attr: t.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mc.movie_id, right_attr: t.id }, Equalizer { left_attr: mc.movie_id, right_attr: ml.movie_id }] })) }), [Id(2)], [Id(0), Id(1), Id(3), Id(4), Id(5), Id(6), Id(7), Id(8)])]
[Lookup([0 @ mk.keyword_id = 0 @ k.id), 1 @ mk.movie_id = 1 @ cc.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 0.004524, cardinality: 743, extra_info: "INNER\nmi.movie_id = t.id\nmi.movie_id = ml.movie_id\nmi.movie_id = mk.movie_id\nmi.movie_id = cc.movie_id\nmi.movie_id = mc.movie_id\n", children: [TreeOp { name: "PROJECTION", timing: 5e-5, cardinality: 936223, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.008906, cardinality: 936223, extra_info: "IN (...)", children: [TreeOp { name: "HASH_JOIN", timing: 0.201678, cardinality: 14835720, extra_info: "MARK\nmi.info = #0\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.082717, cardinality: 14835720, extra_info: "movie_info\n[INFOSEPARATOR]\ninfo\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info", attributes: [movie_info.info, movie_info.movie_id] })) }, TreeOp { name: "CHUNK_SCAN", timing: 0.0, cardinality: 9, extra_info: "", children: [], attr: None }], attr: None }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000103, cardinality: 172, extra_info: "INNER\nmk.movie_id = cc.movie_id\nmk.movie_id = t.id\nmk.movie_id = ml.movie_id\nmk.movie_id = mc.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.003708, cardinality: 10544, extra_info: "INNER\nmk.keyword_id = k.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00076, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.001326, cardinality: 1, extra_info: "keyword\n[INFOSEPARATOR]\nkeyword\nid\n[INFOSEPARATOR]\nFilters: keyword=sequel AND keyword IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "keyword", attributes: [keyword.keyword, keyword.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.keyword_id, right_attr: k.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.001407, cardinality: 277, extra_info: "INNER\nmc.movie_id = cc.movie_id\nmc.movie_id = t.id\nmc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.005093, cardinality: 224256, extra_info: "INNER\nmc.company_id = cn.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002186, cardinality: 1193928, extra_info: "INNER\nmc.company_type_id = ct.id\n", children: [TreeOp { name: "PROJECTION", timing: 0.000124, cardinality: 1271989, extra_info: "#1\n#2\n#3\n", children: [TreeOp { name: "FILTER", timing: 0.003583, cardinality: 1271989, extra_info: "(mc.note IS NULL)", children: [TreeOp { name: "SEQ_SCAN", timing: 0.005873, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\nnote\nmovie_id\ncompany_type_id\ncompany_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.note, movie_companies.movie_id, movie_companies.company_type_id, movie_companies.company_id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2, .#3] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "company_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=production companies AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "company_type", attributes: [company_type.kind, company_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_type_id, right_attr: ct.id }] })) }, TreeOp { name: "PROJECTION", timing: 1e-5, cardinality: 48302, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 0.005465, cardinality: 48302, extra_info: "(cn.country_code != '[pl]' AND (contains(cn.name, 'Film') OR contains(cn.name, 'Warner')))", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00223, cardinality: 234997, extra_info: "company_name\n[INFOSEPARATOR]\ncountry_code\nname\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.country_code, company_name.name, company_name.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_id, right_attr: cn.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.007767, cardinality: 228, extra_info: "INNER\nt.id = cc.movie_id\nt.id = ml.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.02934, cardinality: 1900368, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=1950 AND production_year<=2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: cc.movie_id }, Equalizer { left_attr: t.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mc.movie_id, right_attr: t.id }, Equalizer { left_attr: mc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: t.id }, Equalizer { left_attr: mk.movie_id, right_attr: ml.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mc.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.movie_id, right_attr: t.id }, Equalizer { left_attr: mi.movie_id, right_attr: ml.movie_id }, Equalizer { left_attr: mi.movie_id, right_attr: mk.movie_id }, Equalizer { left_attr: mi.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mi.movie_id, right_attr: mc.movie_id }] })) }
[(Name("mi"), [Name("movie_id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 0.000103, cardinality: 172, extra_info: "INNER\nmk.movie_id = cc.movie_id\nmk.movie_id = t.id\nmk.movie_id = ml.movie_id\nmk.movie_id = mc.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.003708, cardinality: 10544, extra_info: "INNER\nmk.keyword_id = k.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00076, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.001326, cardinality: 1, extra_info: "keyword\n[INFOSEPARATOR]\nkeyword\nid\n[INFOSEPARATOR]\nFilters: keyword=sequel AND keyword IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "keyword", attributes: [keyword.keyword, keyword.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.keyword_id, right_attr: k.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.001407, cardinality: 277, extra_info: "INNER\nmc.movie_id = cc.movie_id\nmc.movie_id = t.id\nmc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.005093, cardinality: 224256, extra_info: "INNER\nmc.company_id = cn.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.002186, cardinality: 1193928, extra_info: "INNER\nmc.company_type_id = ct.id\n", children: [TreeOp { name: "PROJECTION", timing: 0.000124, cardinality: 1271989, extra_info: "#1\n#2\n#3\n", children: [TreeOp { name: "FILTER", timing: 0.003583, cardinality: 1271989, extra_info: "(mc.note IS NULL)", children: [TreeOp { name: "SEQ_SCAN", timing: 0.005873, cardinality: 2609129, extra_info: "movie_companies\n[INFOSEPARATOR]\nnote\nmovie_id\ncompany_type_id\ncompany_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_companies", attributes: [movie_companies.note, movie_companies.movie_id, movie_companies.company_type_id, movie_companies.company_id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2, .#3] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "company_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=production companies AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "company_type", attributes: [company_type.kind, company_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_type_id, right_attr: ct.id }] })) }, TreeOp { name: "PROJECTION", timing: 1e-5, cardinality: 48302, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 0.005465, cardinality: 48302, extra_info: "(cn.country_code != '[pl]' AND (contains(cn.name, 'Film') OR contains(cn.name, 'Warner')))", children: [TreeOp { name: "SEQ_SCAN", timing: 0.00223, cardinality: 234997, extra_info: "company_name\n[INFOSEPARATOR]\ncountry_code\nname\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "company_name", attributes: [company_name.country_code, company_name.name, company_name.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.company_id, right_attr: cn.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 0.007767, cardinality: 228, extra_info: "INNER\nt.id = cc.movie_id\nt.id = ml.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.02934, cardinality: 1900368, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>=1950 AND production_year<=2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.id, title.title] })) }, TreeOp { name: "HASH_JOIN", timing: 0.000319, cardinality: 228, extra_info: "INNER\ncc.movie_id = ml.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 9.1e-5, cardinality: 85941, extra_info: "INNER\ncc.status_id = cct2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000139, cardinality: 85941, extra_info: "INNER\ncc.subject_id = cct1.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 3.9e-5, cardinality: 135086, extra_info: "complete_cast\n[INFOSEPARATOR]\nmovie_id\nsubject_id\nstatus_id", children: [], attr: Some(Scan(ScanAttr { table_name: "complete_cast", attributes: [complete_cast.movie_id, complete_cast.subject_id, complete_cast.status_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 1, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=cast AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.subject_id, right_attr: cct1.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 2, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "prefix(cct2.kind, 'complete')", children: [TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 2, extra_info: "comp_cast_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind>=complete AND kind<completf AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "comp_cast_type", attributes: [comp_cast_type.kind, comp_cast_type.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.status_id, right_attr: cct2.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3.5e-5, cardinality: 2315, extra_info: "INNER\nml.link_type_id = lt.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 29997, extra_info: "movie_link\n[INFOSEPARATOR]\nlink_type_id\nmovie_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_link", attributes: [movie_link.link_type_id, movie_link.movie_id] })) }, TreeOp { name: "FILTER", timing: 1e-6, cardinality: 2, extra_info: "contains(lt.link, 'follow')", children: [TreeOp { name: "SEQ_SCAN", timing: 3e-6, cardinality: 18, extra_info: "link_type\n[INFOSEPARATOR]\nlink\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "link_type", attributes: [link_type.link, link_type.id] })) }], attr: Some(Filter) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ml.link_type_id, right_attr: lt.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: cc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: cc.movie_id }, Equalizer { left_attr: t.id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mc.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mc.movie_id, right_attr: t.id }, Equalizer { left_attr: mc.movie_id, right_attr: ml.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: cc.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: t.id }, Equalizer { left_attr: mk.movie_id, right_attr: ml.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mc.movie_id }] })) }), [Id(1)], [Id(0), Id(2), Id(3), Id(4), Id(5), Id(6), Id(7), Id(8), Id(9)])]
[Lookup([0 @ mi.movie_id = 0 @ mc.movie_id)])]
