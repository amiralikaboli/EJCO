
TreeOp { name: "HASH_JOIN", timing: 0.016876, cardinality: 234, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.008506, cardinality: 83, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000901, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 73, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 2.4e-5, cardinality: 73, extra_info: "prefix(t.title, 'Vampire')", children: [TreeOp { name: "SEQ_SCAN", timing: 0.026437, cardinality: 73, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\ntitle\nid\n[INFOSEPARATOR]\nFilters: production_year>2010 AND production_year IS NOT NULL\ntitle>=Vampire AND title<Vampirf AND title IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.title, title.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.006313, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\nmovie_id\ninfo_type_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.movie_id, movie_info_idx.info_type_id, movie_info_idx.info] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }
[(Name("mk"), [Name("movie_id")], [Name("keyword_id")]), (Name("t"), [Name("id")], [Name("title")]), (Name("mi_idx"), [Name("movie_id")], [Name("info_type_id"), Name("info")])]
[Lookup([0 @ mk.movie_id = 0 @ t.id), 0 @ mk.movie_id = 1 @ mi_idx.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 3e-6, cardinality: 9, extra_info: "INNER\nmi.info_type_id = it1.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 3e-6, cardinality: 9, extra_info: "INNER\nmi_idx.info_type_id = it2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 5e-6, cardinality: 27, extra_info: "INNER\nmk.keyword_id = k.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001222, cardinality: 222, extra_info: "INNER\nmi.movie_id = t.id\nmi.movie_id = mk.movie_id\nmi.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.091807, cardinality: 30801, extra_info: "movie_info\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info=Horror AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info", attributes: [movie_info.info, movie_info.movie_id, movie_info.info_type_id] })) }, TreeOp { name: "HASH_JOIN", timing: 0.016876, cardinality: 234, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.008506, cardinality: 83, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000901, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 73, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 2.4e-5, cardinality: 73, extra_info: "prefix(t.title, 'Vampire')", children: [TreeOp { name: "SEQ_SCAN", timing: 0.026437, cardinality: 73, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\ntitle\nid\n[INFOSEPARATOR]\nFilters: production_year>2010 AND production_year IS NOT NULL\ntitle>=Vampire AND title<Vampirf AND title IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.title, title.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.006313, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\nmovie_id\ninfo_type_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.movie_id, movie_info_idx.info_type_id, movie_info_idx.info] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.movie_id, right_attr: t.id }, Equalizer { left_attr: mi.movie_id, right_attr: mk.movie_id }, Equalizer { left_attr: mi.movie_id, right_attr: mi_idx.movie_id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 5, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 6.9e-5, cardinality: 5, extra_info: "IN (...)", children: [TreeOp { name: "HASH_JOIN", timing: 0.002104, cardinality: 134170, extra_info: "MARK\nk.keyword = #0\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000932, cardinality: 134170, extra_info: "keyword\n[INFOSEPARATOR]\nkeyword\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "keyword", attributes: [keyword.keyword, keyword.id] })) }, TreeOp { name: "CHUNK_SCAN", timing: 0.0, cardinality: 5, extra_info: "", children: [], attr: None }], attr: None }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.keyword_id, right_attr: k.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 6e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=votes AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=genres AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.info_type_id, right_attr: it1.id }] })) }
[(Name("mi"), [Name("movie_id"), Name("info_type_id")], [Name("info")]), (Node(TreeOp { name: "HASH_JOIN", timing: 0.016876, cardinality: 234, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.008506, cardinality: 83, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000901, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 73, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 2.4e-5, cardinality: 73, extra_info: "prefix(t.title, 'Vampire')", children: [TreeOp { name: "SEQ_SCAN", timing: 0.026437, cardinality: 73, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\ntitle\nid\n[INFOSEPARATOR]\nFilters: production_year>2010 AND production_year IS NOT NULL\ntitle>=Vampire AND title<Vampirf AND title IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.title, title.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.006313, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\nmovie_id\ninfo_type_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.movie_id, movie_info_idx.info_type_id, movie_info_idx.info] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }), [Id(0), Id(1), Id(3)], [Id(2), Id(4)]), (Name("k"), [Name("id")], []), (Name("it2"), [Name("id")], []), (Name("it1"), [Name("id")], [])]
[Lookup([0 @ mi.movie_id = 0 @ t.id)]), Intersect([mk.keyword_id @ 0), k.id @ 1)]), Intersect([mi_idx.info_type_id @ 0), it2.id @ 2)]), Lookup([1 @ mi.info_type_id = 3 @ it1.id)])]

TreeOp { name: "HASH_JOIN", timing: 0.003793, cardinality: 6, extra_info: "INNER\nci.movie_id = t.id\nci.movie_id = mk.movie_id\nci.movie_id = mi_idx.movie_id\nci.movie_id = mi.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.05387, cardinality: 558518, extra_info: "INNER\nci.person_id = n.id\n", children: [TreeOp { name: "PROJECTION", timing: 0.000113, cardinality: 1244716, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 0.022374, cardinality: 1244716, extra_info: "IN (...)", children: [TreeOp { name: "HASH_JOIN", timing: 0.247752, cardinality: 36244344, extra_info: "MARK\nci.note = #0\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.107758, cardinality: 36244344, extra_info: "cast_info\n[INFOSEPARATOR]\nnote\nmovie_id\nperson_id", children: [], attr: Some(Scan(ScanAttr { table_name: "cast_info", attributes: [cast_info.note, cast_info.movie_id, cast_info.person_id] })) }, TreeOp { name: "CHUNK_SCAN", timing: 0.0, cardinality: 5, extra_info: "", children: [], attr: None }], attr: None }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.01563, cardinality: 1739579, extra_info: "name\n[INFOSEPARATOR]\ngender\nid\nname\n[INFOSEPARATOR]\nFilters: gender=m AND gender IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "name", attributes: [name.gender, name.id, name.name] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ci.person_id, right_attr: n.id }] })) }, TreeOp { name: "HASH_JOIN", timing: 3e-6, cardinality: 9, extra_info: "INNER\nmi.info_type_id = it1.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 3e-6, cardinality: 9, extra_info: "INNER\nmi_idx.info_type_id = it2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 5e-6, cardinality: 27, extra_info: "INNER\nmk.keyword_id = k.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001222, cardinality: 222, extra_info: "INNER\nmi.movie_id = t.id\nmi.movie_id = mk.movie_id\nmi.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.091807, cardinality: 30801, extra_info: "movie_info\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info=Horror AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info", attributes: [movie_info.info, movie_info.movie_id, movie_info.info_type_id] })) }, TreeOp { name: "HASH_JOIN", timing: 0.016876, cardinality: 234, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.008506, cardinality: 83, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000901, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 73, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 2.4e-5, cardinality: 73, extra_info: "prefix(t.title, 'Vampire')", children: [TreeOp { name: "SEQ_SCAN", timing: 0.026437, cardinality: 73, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\ntitle\nid\n[INFOSEPARATOR]\nFilters: production_year>2010 AND production_year IS NOT NULL\ntitle>=Vampire AND title<Vampirf AND title IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.title, title.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.006313, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\nmovie_id\ninfo_type_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.movie_id, movie_info_idx.info_type_id, movie_info_idx.info] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.movie_id, right_attr: t.id }, Equalizer { left_attr: mi.movie_id, right_attr: mk.movie_id }, Equalizer { left_attr: mi.movie_id, right_attr: mi_idx.movie_id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 5, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 6.9e-5, cardinality: 5, extra_info: "IN (...)", children: [TreeOp { name: "HASH_JOIN", timing: 0.002104, cardinality: 134170, extra_info: "MARK\nk.keyword = #0\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000932, cardinality: 134170, extra_info: "keyword\n[INFOSEPARATOR]\nkeyword\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "keyword", attributes: [keyword.keyword, keyword.id] })) }, TreeOp { name: "CHUNK_SCAN", timing: 0.0, cardinality: 5, extra_info: "", children: [], attr: None }], attr: None }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.keyword_id, right_attr: k.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 6e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=votes AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=genres AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.info_type_id, right_attr: it1.id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: ci.movie_id, right_attr: t.id }, Equalizer { left_attr: ci.movie_id, right_attr: mk.movie_id }, Equalizer { left_attr: ci.movie_id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: ci.movie_id, right_attr: mi.movie_id }] })) }
[(Name("ci"), [Name("person_id"), Name("movie_id")], []), (Name("n"), [Name("id")], [Name("name")]), (Node(TreeOp { name: "HASH_JOIN", timing: 3e-6, cardinality: 9, extra_info: "INNER\nmi.info_type_id = it1.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 3e-6, cardinality: 9, extra_info: "INNER\nmi_idx.info_type_id = it2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 5e-6, cardinality: 27, extra_info: "INNER\nmk.keyword_id = k.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.001222, cardinality: 222, extra_info: "INNER\nmi.movie_id = t.id\nmi.movie_id = mk.movie_id\nmi.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.091807, cardinality: 30801, extra_info: "movie_info\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info=Horror AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info", attributes: [movie_info.info, movie_info.movie_id, movie_info.info_type_id] })) }, TreeOp { name: "HASH_JOIN", timing: 0.016876, cardinality: 234, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.008506, cardinality: 83, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000901, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 73, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 2.4e-5, cardinality: 73, extra_info: "prefix(t.title, 'Vampire')", children: [TreeOp { name: "SEQ_SCAN", timing: 0.026437, cardinality: 73, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\ntitle\nid\n[INFOSEPARATOR]\nFilters: production_year>2010 AND production_year IS NOT NULL\ntitle>=Vampire AND title<Vampirf AND title IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.title, title.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.006313, cardinality: 1380035, extra_info: "movie_info_idx\n[INFOSEPARATOR]\nmovie_id\ninfo_type_id\ninfo", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.movie_id, movie_info_idx.info_type_id, movie_info_idx.info] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.movie_id, right_attr: t.id }, Equalizer { left_attr: mi.movie_id, right_attr: mk.movie_id }, Equalizer { left_attr: mi.movie_id, right_attr: mi_idx.movie_id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 5, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 6.9e-5, cardinality: 5, extra_info: "IN (...)", children: [TreeOp { name: "HASH_JOIN", timing: 0.002104, cardinality: 134170, extra_info: "MARK\nk.keyword = #0\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000932, cardinality: 134170, extra_info: "keyword\n[INFOSEPARATOR]\nkeyword\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "keyword", attributes: [keyword.keyword, keyword.id] })) }, TreeOp { name: "CHUNK_SCAN", timing: 0.0, cardinality: 5, extra_info: "", children: [], attr: None }], attr: None }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.keyword_id, right_attr: k.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 6e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=votes AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 1e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=genres AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.info_type_id, right_attr: it1.id }] })) }), [Id(0)], [Id(1), Id(2), Id(3), Id(4), Id(5), Id(6)])]
[Lookup([1 @ ci.movie_id = 1 @ mk.movie_id), 0 @ ci.person_id = 0 @ n.id)])]
