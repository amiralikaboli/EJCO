
TreeOp { name: "HASH_JOIN", timing: 0.036527, cardinality: 516039, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.036295, cardinality: 299534, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000971, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.025134, cardinality: 391666, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nkind_id\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.kind_id, title.id, title.title] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.011599, cardinality: 1337634, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info<8.5 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }
[(Name("mk"), [Name("movie_id")], [Name("keyword_id")]), (Name("t"), [Name("id")], [Name("title"), Name("kind_id")]), (Name("mi_idx"), [Name("movie_id")], [Name("info_type_id"), Name("info")])]
[Lookup([0 @ mk.movie_id = 0 @ t.id), 0 @ mk.movie_id = 1 @ mi_idx.movie_id)])]

TreeOp { name: "HASH_JOIN", timing: 7e-6, cardinality: 761, extra_info: "INNER\nmi.info_type_id = it1.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 1.9e-5, cardinality: 878, extra_info: "INNER\nmi_idx.info_type_id = it2.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000504, cardinality: 2613, extra_info: "INNER\nmk.keyword_id = k.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.000559, cardinality: 259956, extra_info: "INNER\nt.kind_id = kt.id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.059332, cardinality: 367382, extra_info: "INNER\nmi.movie_id = t.id\nmi.movie_id = mk.movie_id\nmi.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "PROJECTION", timing: 7.1e-5, cardinality: 706674, extra_info: "#1\n#2\n", children: [TreeOp { name: "FILTER", timing: 0.009931, cardinality: 706674, extra_info: "IN (...)", children: [TreeOp { name: "HASH_JOIN", timing: 0.202247, cardinality: 14835720, extra_info: "MARK\nmi.info = #0\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.084252, cardinality: 14835720, extra_info: "movie_info\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info", attributes: [movie_info.info, movie_info.movie_id, movie_info.info_type_id] })) }, TreeOp { name: "CHUNK_SCAN", timing: 1e-6, cardinality: 10, extra_info: "", children: [], attr: None }], attr: None }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1, .#2] })) }, TreeOp { name: "HASH_JOIN", timing: 0.036527, cardinality: 516039, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.036295, cardinality: 299534, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000971, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.025134, cardinality: 391666, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nkind_id\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.kind_id, title.id, title.title] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.011599, cardinality: 1337634, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info<8.5 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.movie_id, right_attr: t.id }, Equalizer { left_attr: mi.movie_id, right_attr: mk.movie_id }, Equalizer { left_attr: mi.movie_id, right_attr: mi_idx.movie_id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 5e-6, cardinality: 1, extra_info: "kind_type\n[INFOSEPARATOR]\nkind\nid\n[INFOSEPARATOR]\nFilters: kind=movie AND kind IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "kind_type", attributes: [kind_type.kind, kind_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.kind_id, right_attr: kt.id }] })) }, TreeOp { name: "PROJECTION", timing: 0.0, cardinality: 3, extra_info: "#1\n", children: [TreeOp { name: "FILTER", timing: 0.001103, cardinality: 3, extra_info: "(k.keyword = 'murder' OR k.keyword = 'murder-in-title' OR k.keyword = 'blood' OR k.keyword = 'violence')", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000936, cardinality: 134170, extra_info: "keyword\n[INFOSEPARATOR]\nkeyword\nid", children: [], attr: Some(Scan(ScanAttr { table_name: "keyword", attributes: [keyword.keyword, keyword.id] })) }], attr: Some(Filter) }], attr: Some(Project(ProjectAttr { columns: [.#1] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.keyword_id, right_attr: k.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 4e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=rating AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi_idx.info_type_id, right_attr: it2.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 2e-6, cardinality: 1, extra_info: "info_type\n[INFOSEPARATOR]\ninfo\nid\n[INFOSEPARATOR]\nFilters: info=countries AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "info_type", attributes: [info_type.info, info_type.id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mi.info_type_id, right_attr: it1.id }] })) }
[(Name("mi"), [Name("movie_id"), Name("info_type_id")], []), (Node(TreeOp { name: "HASH_JOIN", timing: 0.036527, cardinality: 516039, extra_info: "INNER\nt.id = mi_idx.movie_id\nmk.movie_id = mi_idx.movie_id\n", children: [TreeOp { name: "HASH_JOIN", timing: 0.036295, cardinality: 299534, extra_info: "INNER\nmk.movie_id = t.id\n", children: [TreeOp { name: "SEQ_SCAN", timing: 0.000971, cardinality: 4523930, extra_info: "movie_keyword\n[INFOSEPARATOR]\nmovie_id\nkeyword_id", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_keyword", attributes: [movie_keyword.movie_id, movie_keyword.keyword_id] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.025134, cardinality: 391666, extra_info: "title\n[INFOSEPARATOR]\nproduction_year\nkind_id\nid\ntitle\n[INFOSEPARATOR]\nFilters: production_year>2010 AND production_year IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "title", attributes: [title.production_year, title.kind_id, title.id, title.title] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: mk.movie_id, right_attr: t.id }] })) }, TreeOp { name: "SEQ_SCAN", timing: 0.011599, cardinality: 1337634, extra_info: "movie_info_idx\n[INFOSEPARATOR]\ninfo\nmovie_id\ninfo_type_id\n[INFOSEPARATOR]\nFilters: info<8.5 AND info IS NOT NULL\n", children: [], attr: Some(Scan(ScanAttr { table_name: "movie_info_idx", attributes: [movie_info_idx.info, movie_info_idx.movie_id, movie_info_idx.info_type_id] })) }], attr: Some(Join(JoinAttr { join_type: Inner, equalizers: [Equalizer { left_attr: t.id, right_attr: mi_idx.movie_id }, Equalizer { left_attr: mk.movie_id, right_attr: mi_idx.movie_id }] })) }), [Id(0), Id(3), Id(1), Id(4)], [Id(2), Id(5)]), (Name("kt"), [Name("id")], []), (Name("k"), [Name("id")], []), (Name("it2"), [Name("id")], []), (Name("it1"), [Name("id")], [])]
[Lookup([0 @ mi.movie_id = 0 @ t.id)]), Intersect([t.kind_id @ 0), kt.id @ 1)]), Intersect([mk.keyword_id @ 0), k.id @ 2)]), Intersect([mi_idx.info_type_id @ 0), it2.id @ 3)]), Lookup([1 @ mi.info_type_id = 4 @ it1.id)])]
